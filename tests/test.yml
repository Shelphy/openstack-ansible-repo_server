---
# Copyright 2015, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: localhost
  become: yes
  pre_tasks:
    # Make sure OS does not have a stale package cache.
    - name: Update apt cache.
      apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'

- name: Playbook for pre-role testing 1of3
  hosts: 127.0.0.1
  connection: local
  become: false
  pre_tasks:
    - name: Create ssh key pair for root
      user:
        name: "{{ ansible_ssh_user }}"
        generate_ssh_key: "yes"
        ssh_key_bits: 2048
        ssh_key_file: ".ssh/id_rsa"
    - name: get the calling users key
      command: cat ~/.ssh/id_rsa.pub
      register: key_get
    - set_fact:
        lxc_container_ssh_key: "{{ key_get.stdout }}"

- name: Playbook for pre-role testing 2of3
  hosts: localhost
  connection: local
  pre_tasks:
    - name: Ensure root's new public ssh key is in authorized_keys
      authorized_key:
        user: root
        key: "{{ hostvars['127.0.0.1']['lxc_container_ssh_key'] }}"
        manage_dir: no
    - set_fact:
        lxc_container_ssh_key: "{{ hostvars['127.0.0.1']['lxc_container_ssh_key'] }}"
    - name: Check if this is an OpenStack-CI nodepool instance
      stat:
        path: /etc/nodepool/provider
      register: nodepool
    - name: Set the files to copy into the container cache for OpenStack-CI instances
      set_fact:
        lxc_container_cache_files:
          - { src: '/etc/pip.conf', dest: '/etc/pip.conf' }
          - { src: '/etc/apt/apt.conf.d/99unauthenticated', dest: '/etc/apt/apt.conf.d/99unauthenticated' }
      when: nodepool.stat.exists | bool
    - name: Determine the existing Ubuntu repo configuration
      shell: 'awk "/^deb .*ubuntu\/? {{ ansible_distribution_release }} main/ {print \$2; exit}" /etc/apt/sources.list'
      register: ubuntu_repo
      changed_when: false
    - name: Set apt repo facts based on discovered information
      set_fact:
        lxc_container_template_main_apt_repo: "{{ ubuntu_repo.stdout }}"
        lxc_container_template_security_apt_rep: "{{ ubuntu_repo.stdout }}"
  roles:
    - role: "lxc_hosts"
      lxc_net_address: 10.100.100.1
      lxc_net_dhcp_range: 10.100.100.2,10.100.100.253
      lxc_net_bridge: lxcbr0
      lxc_kernel_options:
        - { key: 'fs.inotify.max_user_instances', value: 1024 }
      lxc_container_caches:
        - url: "https://rpc-repo.rackspace.com/container_images/rpc-trusty-container.tgz"
          name: "trusty.tgz"
          sha256sum: "56c6a6e132ea7d10be2f3e8104f47136ccf408b30e362133f0dc4a0a9adb4d0c"
          chroot_path: trusty/rootfs-amd64
  post_tasks:
    # Inventory is being pre-loaded using a post tasks instead of through a dynamic
    #  inventory system. While this is not a usual method for deployment it's being
    #  done for functional testing.
    - name: Create container hosts
      add_host:
        groups: "all,all_containers,repo_all"
        hostname: "{{ item.name }}"
        inventory_hostname: "{{ item.name }}"
        ansible_ssh_host: "{{ item.address }}"
        ansible_become: true
        properties:
          service_name: "{{ item.service }}"
        container_networks:
          management_address:
            address: "{{ item.address }}"
            bridge: "lxcbr0"
            interface: "eth1"
            netmask: "255.255.252.0"
            type: "veth"
        physical_host: localhost
        container_name: "{{ item.name }}"
      with_items:
        - { name: "container1", service: "service1", address: "10.100.100.101" }
        - { name: "container2", service: "service2", address: "10.100.100.102" }
        - { name: "container3", service: "service3", address: "10.100.100.103" }

- name: Playbook for pre-role testing 2of2
  hosts: all_containers
  connection: local
  gather_facts: false
  roles:
    - role: "lxc_container_create"
      lxc_container_release: trusty
      lxc_container_backing_store: dir
      global_environment_variables:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  post_tasks:
    - name: Wait for ssh to be available
      local_action:
        module: wait_for
        port: "{{ ansible_ssh_port | default('22') }}"
        host: "{{ ansible_ssh_host | default(inventory_hostname) }}"
        search_regex: OpenSSH
        delay: 1

- name: Playbook for role testing
  hosts: repo_all
  user: root
  gather_facts: true
  roles:
    - role: "{{ rolename | basename }}"
  post_tasks:
    - name: Confirm containers were created
      command: curl -D - 10.100.100.101:8181
      tags:
        - skip_ansible_lint
    - name: Check nginx is running
      shell: "ps auxf | grep nginx"
      delegate_to: 10.100.100.101
    - name: Check lsync is running
      shell: "ps auxf | grep lsync"
      delegate_to: 10.100.100.101
    - name: Check repo directory exists
      stat:
        path: /var/www/repo
      delegate_to: 10.100.100.101
      register: repo_dir1
    - name: Check repo directory exists
      stat:
        path: /var/www/repo
      delegate_to: 10.100.100.102
      register: repo_dir2
    - name: Check repo directory exists
      stat:
        path: /var/www/repo
      delegate_to: 10.100.100.103
      register: repo_dir3
    - name: Check role functions
      assert:
        that:
          - "repo_dir1.stat.exists"
          - "repo_dir2.stat.exists"
          - "repo_dir3.stat.exists"
